{"version":3,"file":"static/js/26.bbf475f4.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/layout/src/flex.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"label\":\"RegisterForm_label__4pTXF\"};","import { useDispatch } from 'react-redux';\nimport { register, logIn } from 'redux/auth/operations';\nimport css from './RegisterForm.module.css';\nimport { Button, Center, Input, Text } from '@chakra-ui/react';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <>\n      <Center>\n        <Text fontSize={'4xl'}>Registration</Text>\n      </Center>\n\n      <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n        <label className={css.label}>\n          Username\n          <Input type=\"text\" name=\"name\" />\n        </label>\n        <label className={css.label}>\n          Email\n          <Input type=\"email\" name=\"email\" />\n        </label>\n        <label className={css.label}>\n          Password\n          <Input type=\"password\" name=\"password\" />\n        </label>\n        <Center>\n          <Button\n            colorScheme=\"teal\"\n            _hover={{\n              bg: 'teal',\n              color: 'gray.700',\n            }}\n            type=\"submit\"\n          >\n            Register\n          </Button>\n        </Center>\n      </form>\n    </>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { useAuth } from 'hooks';\nimport { Link, Navigate } from 'react-router-dom';\nimport { Button, Center, Flex } from '@chakra-ui/react';\n\nexport const Register = () => {\n  const { isLoggedIn } = useAuth();\n\n  return isLoggedIn ? (\n    <>\n      <Navigate to=\"/goit-react-hw-08-phonebook/contacts\" />\n    </>\n  ) : (\n    <>\n      <Link to=\"/goit-react-hw-08-phonebook\" end=\"true\">\n        <Button\n          h=\"25px\"\n          colorScheme=\"teal\"\n          _hover={{\n            bg: 'teal',\n            color: 'gray.700',\n          }}\n          type=\"button\"\n          variant=\"outline\"\n        >\n          Back\n        </Button>\n      </Link>{' '}\n      <Center>\n        <Flex pt={'30vh'} flexDirection={'column'}>\n          <RegisterForm />\n        </Flex>\n      </Center>\n    </>\n  );\n};\nexport default Register;\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n"],"names":["RegisterForm","dispatch","useDispatch","_jsxs","_Fragment","children","_jsx","Center","Text","fontSize","className","css","onSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","logIn","reset","autoComplete","Input","type","Button","colorScheme","_hover","bg","color","Register","useAuth","isLoggedIn","Navigate","to","Link","end","h","variant","Flex","pt","flexDirection","_createContext","createContext","errorMessage","_createContext2","_slicedToArray","FormControlStylesProvider","useFormControlStyles","_createContext3","strict","_createContext4","FormControlProvider","useFormControlContext","FormControl","forwardRef","props","ref","styles","useMultiStyleConfig","_useFormControlProvid","idProp","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","_objectWithoutProperties","_excluded","uuid","useId","concat","labelId","feedbackId","helpTextId","_useState","useState","_useState2","hasFeedbackText","setHasFeedbackText","_useState3","_useState4","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","props2","arguments","length","undefined","forwardedRef","_objectSpread","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_excluded2","cx","jsx","chakra","__css","displayName","field","helperText","useFormControl","_useFormControlProps","_a","_b","_c","disabled","readOnly","required","rest","labelIds","push","join","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","size","direction","align","justify","wrap","basis","grow","shrink","display","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink"],"sourceRoot":""}